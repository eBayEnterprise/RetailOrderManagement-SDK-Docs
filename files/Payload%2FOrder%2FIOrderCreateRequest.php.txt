<?php
/**
 * Copyright (c) 2013-2014 eBay Enterprise, Inc.
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @copyright   Copyright (c) 2013-2014 eBay Enterprise, Inc. (http://www.ebayenterprise.com/)
 * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

namespace eBayEnterprise\RetailOrderManagement\Payload\Order;

use DateTime;
use eBayEnterprise\RetailOrderManagement\Payload\Checkout\IDestinationContainer;

interface IOrderCreateRequest extends IOrderCreate, IOrderCustomer, IOrderItemContainer, IShipGroupContainer, IDestinationContainer, IPaymentContainer, IItemRelationshipContainer, IOrderHoldContainer, ICustomAttributeContainer, ITemplateContainer, IOrderContext
{
    const ROOT_NODE = 'OrderCreateRequest';
    const PERSON_NAME_ROOT_NODE = 'Name';
    const ORDER_TYPE_SALES = 'SALES';
    const ORDER_TYPE_RETURN = 'RETURN';
    const ORDER_TYPE_PURCHASE = 'PURCHASE';
    const ORDER_TYPE_TRANSFER = 'TRANSFER';
    const TEST_TYPE_WEBONLY = 'TEST_WEBONLY';
    const TEST_TYPE_AUTOCANCEL = 'TEST_AUTOCANCEL';
    const TEST_TYPE_NORELEASE = 'TEST_NORELEASE';
    const TEST_TYPE_AUTOSHIP = 'TEST_AUTOSHIP';
    const LEVEL_OF_SERVICE_REGULAR = 'REGULAR';
    const LEVEL_OF_SERVICE_RUSH = 'RUSH';

    /**
     * Explicitly denotes the type of order to create. "SALES" is the default.
     *
     * restrictions: optional, allowed values "SALES", "RETURN", "PURCHASE", "TRANSFER"
     * @return string
     */
    public function getOrderType();

    /**
     * @param string
     * @return self
     */
    public function setOrderType($orderType);

    /**
     * Universally unique identifier for the request.
     *
     * restrictions: string with length >= 1 and <= 40
     * @return string
     */
    public function getRequestId();

    /**
     * @param string
     * @return self
     */
    public function setRequestId($requestId);

    /**
     * Denotes the order as a test order. If omitted, order is sent to OMS as
     * a live non test order. Values for this attribute are set up within the OMS.
     * Allowable Values:
     * - TEST_WEBONLY - Webstore does not send the order to the Order service.
     *       This tests checkout flow on the webstore, but the order is not sent
     *       to OMS. Useful for demo purposes.
     * - TEST_AUTOCANCEL - Order is sent to OMS, which automatically cancels it.
     *       Tests that the order gets to the OMS.
     * - TEST_NORELEASE - OMS processes but does not ship the order. Tests
     *       payment activation, including taxes.
     * - TEST_AUTOSHIP - OMS automatically ships the order
     *
     * restrictions: optional, allowed values "TEST_WEBONLY", "TEST_AUTOCANCEL",
     *    "TEST_NORELEASE", "TEST_AUTOSHIP"
     * @return string
     */
    public function getTestType();

    /**
     * @param string
     * @return self
     */
    public function setTestType($testType);

    /**
     * Order id generated by the webstore.
     *
     * restrictions: string with length >= 1 and <= 24
     * @return string
     */
    public function getOrderId();

    /**
     * @param string
     * @return self
     */
    public function setOrderId($orderId);

    /**
     * Identifies the priority/urgency with which the order must be processed.
     *
     * restrictions: optional, one of "REGULAR", "RUSH"
     * @return string
     */
    public function getLevelOfService();

    /**
     * @param string
     * @return self
     */
    public function setLevelOfService($levelOfService);

    /**
     * Time the order was created by the generating application.
     *
     * restrictions: xsd:dateTime
     * @return DateTime
     */
    public function getCreateTime();

    /**
     * @param DateTime
     * @return self
     */
    public function setCreateTime(DateTime $createTime);

    /**
     * Reference to the mail address destination the order is being billed to.
     *
     * @return IMailingAddress
     */
    public function getBillingAddress();

    /**
     * @param IMailingAddress
     * @return self
     */
    public function setBillingAddress(IMailingAddress $billingAddressId);

    /**
     * Promotional message to display to the customer.
     *
     * restrictions: whitespace normalized string
     * @return string
     */
    public function getShopRunnerMessage();

    /**
     * @param string
     * @return self
     */
    public function setShopRunnerMessage($shopRunnerMessage);

    /**
     * Code for the currency being used for the transaction.
     *
     * restrictions: 3 character string, ISOCurrencyCodeType
     * @return string
     */
    public function getCurrency();

    /**
     * @param string
     * @return self
     */
    public function setCurrency($currency);

    /**
     * Name of the person who made or facilitated the sale. Typically used
     * when a sales associate in a store places an order for a customer.
     *
     * @return string
     */
    public function getAssociateName();

    /**
     * @param string
     * @return self
     */
    public function setAssociateName($associateName);

    /**
     * Store assigned number for the sales person.
     *
     * @return string
     */
    public function getAssociateNumber();

    /**
     * @param string
     * @return self
     */
    public function setAssociateNumber($associateNumber);

    /**
     * Unique identifier for the store.
     *
     * @return string
     */
    public function getAssociateStore();

    /**
     * @param string
     * @return self
     */
    public function setAssociateStore($associateStore);

    /**
     * Indicates that errors were received when retrieving tax calculations
     * for the order.
     *
     * @return bool
     */
    public function getTaxHasErrors();

    /**
     * @param bool
     * @return self
     */
    public function setTaxHasErrors($taxHeader);

    /**
     * Catalog code found in printed catalogs.
     *
     * restrictions: optional
     * @return string
     */
    public function getPrintedCatalogCode();

    /**
     * @param string
     * @return self
     */
    public function setPrintedCatalogCode($printedCatalogCode);

    /**
     * Code for the locale in which the order was created. Expected to contain
     * an ISO-639 two-letter language code, an underscore, and an ISO-3166
     * two-letter code.
     *
     * restrictions: min length 1, max length 5
     * @return string
     */
    public function getLocale();

    /**
     * @param string
     * @return self
     */
    public function setLocale($locale);

    /**
     * Id number of the customer service rep who created the order through
     * the dashboard.
     *
     * restrictions: optional
     * @return string
     */
    public function getDashboardRepId();

    /**
     * @param string
     * @return self
     */
    public function setDashboardRepId($dashboardRepId);

    /**
     * Code used to track where the order originated.
     *
     * restrictions: optional
     * @return string
     */
    public function getOrderSource();

    /**
     * @param string
     * @return self
     */
    public function setOrderSource($orderSource);

    /**
     * Used for marketing and affiliate tracking to identify the type of the
     * order source.
     *
     * @return string
     */
    public function getOrderSourceType();

    /**
     * @param string
     * @return self
     */
    public function setOrderSourceType($orderSourceType);

    /**
     * URL for the webstore's order history page.
     *
     * restrictions: optional
     * @return string
     */
    public function getOrderHistoryUrl();

    /**
     * @param string
     * @return self
     */
    public function setOrderHistoryUrl($orderHistoryUrl);

    /**
     * Indicates if Value Added Tax (VAT) is contained in the items' prices.
     *
     * @return bool
     */
    public function getVatInclusivePricing();

    /**
     * @param bool
     * @return self
     */
    public function setVatInclusivePricing($vatInclusivePricing);

    /**
     * Total dollar amount of the order.
     *
     * restrictions: 2 decimal, non-negative
     * @return string
     */
    public function getOrderTotal();

    /**
     * @param string
     * @return self
     */
    public function setOrderTotal($orderTotal);
}

